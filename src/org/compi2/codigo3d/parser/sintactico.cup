package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER, IGUAL, DIFERENTE, MAYOR, MENOR, MAYOR_IG, MENOR_IG, AND, OR, NOT;
nonterminal NodoC3D inicial, expresion, condicional, relacional;
nonterminal String oprelacional;
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MAYOR, MENOR, MAYOR_IG, MENOR_IG, IGUAL, DIFERENTE;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} condicional:exp 
                    {: 
                        
                        
                        if(exp.getETQV()!=""){
                        
                        } else {
                        ControlC3D.agregarC3D("//Ultimo valor: " + exp.getCad());
                        }
                        RESULT = exp;
                    :};
condicional   ::= condicional:izq AND condicional:der
                    {:
                       /* String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " && " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); */
                        
                        String etqV = der.getETQV();
                        String etqF = izq.getETQF() + "," + der.getETQF();
                        String c3d = "//Etiqueta(s) de verdadero: "+etqV+"\n"+"//Etiqueta(s) de falso: "+etqF+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(der.getCad(),etqV,etqF);
                    :}
              |   condicional:izq OR{:String c3d = izq.getETQF() + ":\n"; ControlC3D.agregarC3D(c3d); :}condicional:der
                    {:
                        /*String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " || " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); */
                        String etqV = izq.getETQV() + "," + der.getETQV();
                        String etqF = der.getETQF();
                        String c3d = "//Etiqueta(s) de verdadero: "+etqV+"\n"+"//Etiqueta(s) de falso: "+etqF+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(der.getCad(),etqV,etqF);
                        
                    :}
              |   NOT condicional:unico
                    {:
                        /*String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + "NOT " + unico.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp);*/
                        String etqV = ControlC3D.generaEtiqueta();
                        String etqF = ControlC3D.generaEtiqueta();
                        String c3d = "//Etiqueta(s) de verdadero: "+ etqV +"\n"+"//Etiqueta(s) de falso: "+ etqF +"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(unico.getCad(),etqV,etqF);

                    :}

              |     expresion:izq oprelacional:opr expresion:der
                    {:
                        String etqV = ControlC3D.generaEtiqueta();
                        String etqF = ControlC3D.generaEtiqueta();
                        /*String c3d = temp + " = " + izq.getCad() + " " + op + " " + der.getCad() + ";\n";*/
                        String c3d = "if ("+izq.getCad() + opr + der.getCad() +") goto " +etqV+ ";\n" +"goto "+etqF+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(der.getCad(),etqV,etqF);


                    :}
             | expresion:unico
                    {:
                        /*String temp = unico.getCad();
                        RESULT = new NodoC3D(temp);*/
                        String etqV = unico.getETQV();
                        String etqF = unico.getETQF();
                        RESULT = new NodoC3D(unico.getCad(),etqV,etqF);
                    :}
             ;

oprelacional   ::= IGUAL
                    {:
                        
                        RESULT = "==";
                    :}
            |   DIFERENTE
                    {:
                        RESULT = "!=";
                    :}
            |   MAYOR
                    {:
                        RESULT = ">";
                    :}
            |   MENOR
                    {:
                        RESULT = "<";
                    :}
            |   MAYOR_IG
                    {:
                        RESULT = ">=";
                    :}
            |   MENOR_IG 
                    {:
                        RESULT = "<=";
                    :}
            ;
expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;